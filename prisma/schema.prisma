generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    hostName      String?
    hostSlug      String?   @unique @default(cuid())
    hostLogo      String?
    packages      Package[]
    bookings      Booking[]
    accounts      Account[]
    sessions      Session[]
}

model Package {
    id          String    @id @default(cuid())
    hostId      String
    image       String
    name        String
    description String
    bedrooms    Int
    bathrooms   Int
    price       Float
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    host        User      @relation(fields: [hostId], references: [id])
    bookings    Booking[]

    @@index([hostId])
}

model Booking {
    id            String   @id @default(cuid())
    hostId        String
    packageId     String
    checkIn       DateTime
    checkOut      DateTime
    guestFullName String
    guestEmail    String
    guestPhone    String
    guestNotes    String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    user          User     @relation(fields: [hostId], references: [id])
    package       Package  @relation(fields: [packageId], references: [id])

    @@index([hostId])
    @@index([packageId])
}
